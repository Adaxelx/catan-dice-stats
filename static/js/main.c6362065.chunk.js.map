{"version":3,"sources":["components/StatsBoard/StatsBoard.css.js","components/StatsBoard/StatsBoard.jsx","components/Board/Board.css.js","constants/diceNumbers.js","components/Board/Board.jsx","views/Dashboard/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledDiceStats","styled","div","StyledStatDisplay","StyledBody","Card","Body","StyledDiceNumber","p","StatsBoard","stats","countOfDiceRolls","playersCount","Object","keys","map","key","reduce","acc","number","Accordion","Header","Toggle","as","Button","variant","eventKey","Collapse","className","value","Math","floor","StyledBoard","main","StyledTile","diceNumbers","Board","setStats","onClick","id","newObject","handleClick","Dashboard","useState","useEffect","object","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g9BAGO,IAAMA,EAAkBC,IAAOC,IAAV,KASfC,EAAoBF,IAAOC,IAAV,KAUjBE,EAAaH,YAAOI,IAAKC,KAAZL,CAAH,KAIVM,EAAmBN,IAAOO,EAAV,KCyBdC,EA1CI,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MACdC,GADwC,EAAnBC,aACFC,OAAOC,KAAKJ,GAClCK,KAAI,SAACC,GAAD,OAASN,EAAMM,MACnBC,QAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAMC,IAAQ,IAUzC,OACE,kBAACC,EAAA,EAAD,KACE,kBAACf,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKgB,OAAN,KACE,kBAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIC,IAAQC,QAAQ,OAAOC,SAAS,KAAtD,mBAIF,kBAACN,EAAA,EAAUO,SAAX,CAAoBD,SAAS,KAC3B,kBAACtB,EAAD,CAAYwB,UAAU,YACpB,uBAAGA,UAAU,eAAb,uCAC0BjB,GAE1B,kBAACX,EAAD,KACGa,OAAOC,KAAKJ,GAAOK,KAAI,SAACC,GAAD,OACtB,kBAACb,EAAD,KACE,kBAACI,EAAD,KAAmBS,GACnB,8BAAON,EAAMM,KAzBJa,EA0BQnB,EAAMM,GAzBjCL,EACI,GAAN,OAAUmB,KAAKC,MAAOF,EAAQlB,EAAoB,KAAlD,KAEI,OAJgB,IAACkB,W,6hBCZpB,IAAMG,EAAc/B,IAAOgC,KAAV,KAWXC,EAAajC,IAAOC,IAAV,KCXRiC,EAFK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,ICsBtCC,EAlBD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAU3B,EAAY,EAAZA,MAOzB,OACE,kBAACsB,EAAD,KACGG,EAAYpB,KAAI,SAACI,GAAD,OACf,kBAACe,EAAD,CAAYI,QAAS,kBATP,SAACC,GACnB,IAAMC,EAAS,eAAQ9B,GACvB8B,EAAUD,IAAO,EACjBF,EAASG,GAMsBC,CAAYtB,IAASH,IAAKG,GAClDA,QCoBIuB,G,MA7BG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfjC,EADe,KACR2B,EADQ,KAkBtB,OAfAO,qBAAU,WACR,IAAMC,EAAS,GACfV,EAAYpB,KAAI,SAACc,GAAD,OAAYgB,EAAOhB,GAAS,KAC5CQ,EAASQ,KACR,IAYD,kBAACC,EAAA,EAAD,CAAWlB,UAAU,OACnB,kBAAC,EAAD,CAAYlB,MAAOA,IACnB,kBAAC,EAAD,CAAOA,MAAOA,EAAO2B,SAAUA,IAC/B,kBAACb,EAAA,EAAD,CAAQC,QAAQ,UAAUa,QAAS,cAAnC,sBCrBSS,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6362065.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Card } from \"react-bootstrap\";\n\nexport const StyledDiceStats = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, 1fr);\n  column-gap: 5px;\n  row-gap: 5px;\n  background-color: #fdd906;\n`;\n\nexport const StyledStatDisplay = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n  background-color: #1f3057;\n  color: white;\n`;\n\nexport const StyledBody = styled(Card.Body)`\n  background-color: #fdd906 !important;\n`;\n\nexport const StyledDiceNumber = styled.p`\n  margin: 0;\n  font-size: 1.5rem;\n  color: #8fc693;\n`;\n","import React, { useMemo } from \"react\";\nimport { Accordion, Card, Button } from \"react-bootstrap\";\nimport {\n  StyledDiceStats,\n  StyledStatDisplay,\n  StyledDiceNumber,\n  StyledBody,\n} from \"./StatsBoard.css\";\n\nconst StatsBoard = ({ stats, playersCount }) => {\n  const countOfDiceRolls = Object.keys(stats)\n    .map((key) => stats[key])\n    .reduce((acc, number) => acc + number, 0);\n\n  const percentageValue = (value) => {\n    if (countOfDiceRolls) {\n      return `${Math.floor((value / countOfDiceRolls) * 100)}%`;\n    }\n    return `0%`;\n  };\n\n  const queueCount = countOfDiceRolls / playersCount;\n  return (\n    <Accordion>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n            Statystyki gry\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n          <StyledBody className=\"p-0 py-3\">\n            <p className=\"text-center\">\n              Liczba rzutów łącznie: {countOfDiceRolls}\n            </p>\n            <StyledDiceStats>\n              {Object.keys(stats).map((key) => (\n                <StyledStatDisplay>\n                  <StyledDiceNumber>{key}</StyledDiceNumber>\n                  <span>{stats[key]}</span>\n                  {percentageValue(stats[key])}\n                </StyledStatDisplay>\n              ))}\n            </StyledDiceStats>\n          </StyledBody>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n};\n\nexport default StatsBoard;\n","import styled from \"styled-components\";\n\nexport const StyledBoard = styled.main`\n  background-color: #1f3057;\n  height: calc(4 * 15vh + 3 * 5px);\n  display: grid;\n  width: 100%;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, 1fr);\n  column-gap: 5px;\n  row-gap: 5px;\n`;\n\nexport const StyledTile = styled.div`\n  width: 100%;\n  height: 15vh;\n  background-color: #fdd906;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #8fc693;\n`;\n","const diceNumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nexport default diceNumbers;\n","import React, { useCallback } from \"react\";\nimport { StyledBoard, StyledTile } from \"./Board.css\";\nimport diceNumbers from \"constants/diceNumbers\";\n\nconst Board = ({ setStats, stats }) => {\n  const handleClick = (id) => {\n    const newObject = { ...stats };\n    newObject[id] += 1;\n    setStats(newObject);\n  };\n\n  return (\n    <StyledBoard>\n      {diceNumbers.map((number) => (\n        <StyledTile onClick={() => handleClick(number)} key={number}>\n          {number}\n        </StyledTile>\n      ))}\n    </StyledBoard>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Button } from \"react-bootstrap\";\nimport { Board, StatsBoard } from \"components\";\nimport diceNumbers from \"constants/diceNumbers\";\nimport fs from \"fs\";\n\nconst Dashboard = () => {\n  const [stats, setStats] = useState({});\n\n  useEffect(() => {\n    const object = {};\n    diceNumbers.map((value) => (object[value] = 0));\n    setStats(object);\n  }, []);\n\n  //   const handleSaveToFile = async () => {\n  //     const date = new Date();\n  //     console.log(fs);\n  //     // await fs.writeFile(\n  //     //   `data/catan-${date.toLocaleDateString(\"pl-PL\")}.json`,\n  //     //   JSON.stringify(stats)\n  //     // );\n  //   };\n\n  return (\n    <Container className=\"p-0\">\n      <StatsBoard stats={stats} />\n      <Board stats={stats} setStats={setStats} />\n      <Button variant=\"primary\" onClick={() => {}}>\n        Zapisz do pliku\n      </Button>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"views/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}